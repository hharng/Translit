<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
	var fullTests = GetFullTests();
	var roundTests = GetRoundTests();
#>
using Xunit;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at <#=DateTime.Now.ToString("u")#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NickBuhro.Translit.Tests
{
	partial class TransliterationTests
	{
<# foreach (var tc in fullTests) { #>
		[Fact]
		public void Forward<#=tc.Id#>()
		{
			// <#=tc.FileName#>
			// Ln <#=string.Format("{0,3}", tc.LineNumber)#>
			CyrillycToLatinTest(
				Language.<#=tc.Language#>,
				@"<#=tc.Cyrillic#>", 
				@"<#=tc.Latin#>");
		}

		[Fact]
		public void Backward<#=tc.Id#>()
		{
			// <#=tc.FileName#>
			// Ln <#=string.Format("{0,3}", tc.LineNumber)#>
			LatinToCyrillicTest(
				Language.<#=tc.Language#>,
				@"<#=tc.Latin#>",
				@"<#=tc.Cyrillic#>");
		}

<# } #>
<# foreach (var tc in roundTests) { #>
		[Fact]
		public void <#=tc.Id#>()
		{
			// <#=tc.FileName#>			
			RoundTest(
				Language.<#=tc.Language#>,				
				@"<#=tc.Cyrillic#>");
		}

<# } #>	
	}
}


<#+
	private class RoundTestCase
	{
		public string Cyrillic;		
		public string Language;
		public string FileName;

		public virtual string Id
		{
			get 
			{
				var fName = FileName.Substring(0, FileName.Length - 4);
				if (fName.Contains(Path.DirectorySeparatorChar.ToString()))
					return fName.Replace(Path.DirectorySeparatorChar.ToString(), "");
				return fName + Language;
			}
		}
	}
	
	private class FullTestCase: RoundTestCase
	{
		public string Latin;
		public int LineNumber;

		public override string Id
		{
			get 
			{
				return base.Id + "At" + LineNumber.ToString("000");
			}
		}
	}
	
	private static readonly string[] Languages = new []
	{
		"Unknown",
        "Russian",
        "Belorussian",
        "Ukrainian",
        "Bulgarian",
        "Macedonian"
	};
	
	private string GetLanguage(string filePath)
	{
		var fileName = Path.GetFileName(filePath);
		var match = Regex.Match(
			filePath,
            @".*?\\TestCase(\\\w+)?\\" + fileName, 
            RegexOptions.Singleline);

		if (!match.Success)
			throw new ArgumentException();
		
		if (match.Groups.Count > 1)
		{
			return match.Groups[1].Value.Substring(1);
		}
		return null;
	}	

	private IEnumerable<FullTestCase> ParseFullFile(string filePath)
	{	
		var lang = GetLanguage(filePath);
		var fileName = Path.GetFileName(filePath);
		if (lang != null)
		{
			fileName = Path.Combine(lang, fileName);
		}

		var txt = File.ReadAllText(filePath);
		var lines = txt.Split(new[] {Environment.NewLine}, StringSplitOptions.None);
				
		var i = 0;
		while (i < (lines.Length - 1))
		{
			if (string.IsNullOrEmpty(lines[i]) || string.IsNullOrEmpty(lines[i]))
			{
				i++;
				continue;
			}

			var cyr = lines[i].Replace("@", "");
			var lat = lines[i+1].Replace("@", "");

			if (lang != null)
			{
				var tc = new FullTestCase();
				tc.Cyrillic = cyr;
				tc.Latin = lat;
				tc.Language = lang;
				tc.FileName = fileName;
				tc.LineNumber = i+1; 
				yield return tc;
			}
			else
			{
				foreach (var l in Languages)
				{
					var tc = new FullTestCase();
					tc.Cyrillic = cyr;
					tc.Latin = lat;
					tc.Language = l;
					tc.FileName = fileName;
					tc.LineNumber = i+1; 
					yield return tc;
				}
			}

			i += 2;
		}
	}
	
	private IEnumerable<RoundTestCase> ParseRoundFile(string filePath)
	{	
		var lang = GetLanguage(filePath);
		var fileName = Path.GetFileName(filePath);
		if (lang != null)
		{
			fileName = Path.Combine(lang, fileName);
		}

		var txt = File.ReadAllText(filePath);			
		txt = Regex.Replace(
			txt.Replace("@", "").Trim(),
			"[\r\n\t ]{2,}", 
			Environment.NewLine);

		if (lang != null)
		{
			var tc = new RoundTestCase();
			tc.Cyrillic = txt;
			tc.Language = lang;
			tc.FileName = fileName;
			yield return tc;
		}
		else
		{
			foreach (var l in Languages)
			{
				var tc = new RoundTestCase();
				tc.Cyrillic = txt;
				tc.Language = l;
				tc.FileName = fileName;
				yield return tc;
			}
		}
	}

	private IEnumerable<FullTestCase> GetFullTests()
	{
		var dir = Path.GetDirectoryName(this.Host.TemplateFile);
		dir = Path.Combine(dir, "TestCase");
		var files = Directory.GetFiles(
                dir,
                "Full*.txt",
                SearchOption.AllDirectories);

		foreach (var f in files)
		{
			foreach (var tc in ParseFullFile(f))
			{
				yield return tc;
			}
		}
	}

	private IEnumerable<RoundTestCase> GetRoundTests()
	{
		var dir = Path.GetDirectoryName(this.Host.TemplateFile);
		dir = Path.Combine(dir, "TestCase");
		var files = Directory.GetFiles(
                dir,
                "Round*.txt",
                SearchOption.AllDirectories);

		foreach (var f in files)
		{
			foreach (var tc in ParseRoundFile(f))
			{
				yield return tc;
			}
		}
	}

#>