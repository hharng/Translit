<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var path = this.Host.TemplateFile.Replace(".t4.tt", ".cases.ru.txt");
	var text = File.ReadAllText(path);
	var lines = text.Split(new[] {Environment.NewLine}, StringSplitOptions.None);

	var data = new List<string[]>(1 + lines.Length/3);	
	var j = 0;
	while (j < (lines.Length - 1))
	{
		if (string.IsNullOrEmpty(lines[j]) || string.IsNullOrEmpty(lines[j]))
		{
			j++;
			continue;
		}
		data.Add(new [] {lines[j], lines[j+1]});
		j += 2;
	}

	// Long string test
	var lstCyrillic = string.Join(Environment.NewLine, data.Select(l => l[0]));
	var lstLatin = string.Join(Environment.NewLine, data.Select(l => l[1]));

	const int repeatCount = 100;
	lstCyrillic = string.Concat(Enumerable.Repeat(lstCyrillic, repeatCount));
	lstLatin = string.Concat(Enumerable.Repeat(lstLatin, repeatCount));
#>
using Xunit;

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at <#=DateTime.Now.ToString("u")#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NickBuhro.Tests
{
	partial class TransliterationTests
	{
		#region Test cases

		private static readonly string[][] TestCases =
	    {
<# for (var i = 0; i < data.Count; i++) { #>
			new []	// <#=i.ToString("00")#>
			{
			    @"<#=data[i][0]#>",
                @"<#=data[i][1]#>"
			},
<# } #>
		};

		#endregion

		#region Long string test case

		private static readonly string[] LongStringTestCase = 
		{
@"<#=lstCyrillic#>",

@"<#=lstLatin#>"
		};

		#endregion

		#region Test methods

<# for (var i = 0; i < data.Count; i++) { #>
		[Fact]
		public void RussianToLatin<#=i.ToString("00")#>Test()
		{
			var testCase = TestCases[<#=i#>];
			RussianToLatinTestHelper(testCase[0], testCase[1]);
		}

		[Fact]
		public void LatinToRussian<#=i.ToString("00")#>Test()
		{
			var testCase = TestCases[<#=i#>];
			LatinToRussianTestHelper(testCase[1], testCase[0]);
		}

<# } #>
		[Fact]
		public void RussianToLatinLongStringTest()
		{		
			RussianToLatinTestHelper(LongStringTestCase[0], LongStringTestCase[1]);
		}

		[Fact]
		public void LatinToRussianLongStringTest()
		{
			LatinToRussianTestHelper(LongStringTestCase[1], LongStringTestCase[0]);
		}

		#endregion
	}
}
